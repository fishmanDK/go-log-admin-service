// Code generated by protoc-gen-go-client-constructor. DO NOT EDIT.
//
// Version: v1.10.0
//---------------------------------------------------

//go:generate mockgen -source=as_alerting_settings_grpc.pb.go -package=goLog_admin_service -destination=as_alerting_settings_grpc.pb.mock.go
//go:generate mockgen -source=as_client_grpc.pb.go -package=goLog_admin_service -destination=as_client_grpc.pb.mock.go

package goLog_admin_service

import (
	"fmt"
	"net"

	gomock "github.com/golang/mock/gomock"
	"google.golang.org/grpc"
)

type MockClient struct {
	Client                      *Client
	recorder                    *MockClientMockRecorder
	MockAlertingSettingsService *MockAlertingSettingsServiceClient
	MockClientService           *MockClientServiceClient
}

type MockClientMockRecorder struct {
	*MockAlertingSettingsServiceClientMockRecorder
	*MockClientServiceClientMockRecorder
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mockClient := &MockClient{
		MockAlertingSettingsService: NewMockAlertingSettingsServiceClient(ctrl),
		MockClientService:           NewMockClientServiceClient(ctrl),
	}

	mockClient.recorder = &MockClientMockRecorder{
		MockAlertingSettingsServiceClientMockRecorder: mockClient.MockAlertingSettingsService.recorder,
		MockClientServiceClientMockRecorder:           mockClient.MockClientService.recorder,
	}

	mockClient.Client = &Client{
		conn:                          nil,
		AlertingSettingsServiceClient: mockClient.MockAlertingSettingsService,
		ClientServiceClient:           mockClient.MockClientService,
	}

	return mockClient
}

func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

type MockServer struct {
	AlertingSettingsService *MockAlertingSettingsServiceServer
	ClientService           *MockClientServiceServer
	Server                  *grpc.Server
	Listener                net.Listener
}

func (m *MockServer) Close() error {
	m.Server.GracefulStop()
	return m.Listener.Close()
}

func NewMockServer(ctrl *gomock.Controller, cfg *Config, opts ...grpc.ServerOption) (*MockServer, error) {
	s := &MockServer{
		Server:                  grpc.NewServer(opts...),
		AlertingSettingsService: NewMockAlertingSettingsServiceServer(ctrl),
		ClientService:           NewMockClientServiceServer(ctrl),
	}

	l, err := net.Listen("tcp", cfg.Host)
	if err != nil {
		return nil, fmt.Errorf("failed to listen tcp %s: %w", cfg.Host, err)
	}

	s.Listener = l
	RegisterAlertingSettingsServiceServer(s.Server, s.AlertingSettingsService)
	RegisterClientServiceServer(s.Server, s.ClientService)
	return s, nil
}
