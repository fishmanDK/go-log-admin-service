// Code generated by protoc-gen-go-client-constructor. DO NOT EDIT.
//
// Version: v1.10.0
// ---------------------------------------------------
package goLog_admin_service

import (
	"context"
	"crypto/tls"
	"errors"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/credentials/insecure"
)

type ClientInterface interface {
	Close() error
	AlertingSettingsServiceClient
	ClientServiceClient
}

type Client struct {
	conn grpcConn
	AlertingSettingsServiceClient
	ClientServiceClient
}

/*
Config for Client

Usage:
this config is optimized to use with package https://github.com/caarlos0/env
to add custom prefixes in your config see section https://github.com/caarlos0/env#prefixes
*/
type Config struct {
	// Host
	//
	// host address f.e. 192.168.47.159:9000
	Host string `env:"HOST"`

	// Timeout
	//
	// timeout of connection during establishing
	Timeout time.Duration `env:"TIMEOUT" envDefault:"30s"`

	// InsecureConnection
	//
	// defines whether use insecure.NewCredentials or credentials.NewTLS
	InsecureConnection bool `env:"INSECURE_CONNECTION" envDefault:"false"`
}

func NewClient(ctx context.Context, cfg Config, opts ...grpc.DialOption) (*Client, error) {
	ctx, cancel := context.WithTimeout(ctx, cfg.Timeout)
	defer cancel()

	if cfg.InsecureConnection {
		opts = append(opts,
			grpc.WithTransportCredentials(insecure.NewCredentials()),
		)
	} else {
		opts = append(opts,
			grpc.WithTransportCredentials(credentials.NewTLS(&tls.Config{MinVersion: tls.VersionTLS13})),
		)
	}

	conn := grpcConn(stubConn{})

	if cfg.Host != "" {
		var err error
		conn, err = grpc.DialContext(
			ctx,
			cfg.Host,
			opts...,
		)
		if err != nil {
			return nil, err
		}
	}

	client := &Client{
		conn,
		NewAlertingSettingsServiceClient(conn),
		NewClientServiceClient(conn),
	}
	return client, nil
}

func (c *Client) Close() error {
	if c.conn == nil {
		return nil
	}
	return c.conn.Close()
}

type grpcConn interface {
	grpc.ClientConnInterface
	Close() error
}

var ErrNoConnection = errors.New("there is no real connection, a stub was requested")

type stubConn struct{}

func (stubConn) Invoke(context.Context, string, interface{}, interface{}, ...grpc.CallOption) error {
	return ErrNoConnection
}

func (stubConn) NewStream(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) (grpc.ClientStream, error) {
	return nil, ErrNoConnection
}

func (stubConn) Close() error { return nil }
